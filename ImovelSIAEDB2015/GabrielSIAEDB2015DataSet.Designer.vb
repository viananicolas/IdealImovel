'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.0
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("GabrielSIAEDB2015DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class GabrielSIAEDB2015DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableContratoAluguel As ContratoAluguelDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ContratoAluguel")) Is Nothing) Then
                MyBase.Tables.Add(New ContratoAluguelDataTable(ds.Tables("ContratoAluguel")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ContratoAluguel() As ContratoAluguelDataTable
        Get
            Return Me.tableContratoAluguel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As GabrielSIAEDB2015DataSet = CType(MyBase.Clone,GabrielSIAEDB2015DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ContratoAluguel")) Is Nothing) Then
                MyBase.Tables.Add(New ContratoAluguelDataTable(ds.Tables("ContratoAluguel")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableContratoAluguel = CType(MyBase.Tables("ContratoAluguel"),ContratoAluguelDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContratoAluguel) Is Nothing) Then
                Me.tableContratoAluguel.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "GabrielSIAEDB2015DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/GabrielSIAEDB2015DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableContratoAluguel = New ContratoAluguelDataTable()
        MyBase.Tables.Add(Me.tableContratoAluguel)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeContratoAluguel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GabrielSIAEDB2015DataSet = New GabrielSIAEDB2015DataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ContratoAluguelRowChangeEventHandler(ByVal sender As Object, ByVal e As ContratoAluguelRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ContratoAluguelDataTable
        Inherits Global.System.Data.TypedTableBase(Of ContratoAluguelRow)
        
        Private columnid_contrato As Global.System.Data.DataColumn
        
        Private columnid_proprietario As Global.System.Data.DataColumn
        
        Private columnid_imovel As Global.System.Data.DataColumn
        
        Private columnid_inquilino1 As Global.System.Data.DataColumn
        
        Private columnid_inquilino2 As Global.System.Data.DataColumn
        
        Private columnid_fiador1 As Global.System.Data.DataColumn
        
        Private columnid_fiador2 As Global.System.Data.DataColumn
        
        Private columndatacontrato As Global.System.Data.DataColumn
        
        Private columndataencerramentocontrato As Global.System.Data.DataColumn
        
        Private columnvencimentoparcelas As Global.System.Data.DataColumn
        
        Private columniniciocobranca As Global.System.Data.DataColumn
        
        Private columnnometestemunha1 As Global.System.Data.DataColumn
        
        Private columncpftestemunha1 As Global.System.Data.DataColumn
        
        Private columnnometestemunha2 As Global.System.Data.DataColumn
        
        Private columncpftestemunha2 As Global.System.Data.DataColumn
        
        Private columnnomefiador1 As Global.System.Data.DataColumn
        
        Private columnnomefiador2 As Global.System.Data.DataColumn
        
        Private columnvaloraluguel As Global.System.Data.DataColumn
        
        Private columnporcentagemmultaatraso As Global.System.Data.DataColumn
        
        Private columndiasmultaatraso As Global.System.Data.DataColumn
        
        Private columnporcentagemjurosmora As Global.System.Data.DataColumn
        
        Private columndiasjurosmora As Global.System.Data.DataColumn
        
        Private columnporcentagemhonorario As Global.System.Data.DataColumn
        
        Private columndiashonorario As Global.System.Data.DataColumn
        
        Private columnporcentagemdesconto As Global.System.Data.DataColumn
        
        Private columndiasdesconto As Global.System.Data.DataColumn
        
        Private columnobservacoes As Global.System.Data.DataColumn
        
        Private columnproprietario As Global.System.Data.DataColumn
        
        Private columntipoimovel As Global.System.Data.DataColumn
        
        Private columnsituacao As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ContratoAluguel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_contratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_contrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_proprietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_proprietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_imovelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_imovel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_inquilino1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_inquilino1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_inquilino2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_inquilino2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_fiador1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_fiador1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_fiador2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_fiador2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property datacontratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatacontrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataencerramentocontratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndataencerramentocontrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vencimentoparcelasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvencimentoparcelas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property iniciocobrancaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniniciocobranca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nometestemunha1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnometestemunha1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cpftestemunha1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncpftestemunha1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nometestemunha2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnometestemunha2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cpftestemunha2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncpftestemunha2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nomefiador1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomefiador1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nomefiador2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomefiador2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valoraluguelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvaloraluguel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property porcentagemmultaatrasoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnporcentagemmultaatraso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property diasmultaatrasoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiasmultaatraso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property porcentagemjurosmoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnporcentagemjurosmora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property diasjurosmoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiasjurosmora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property porcentagemhonorarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnporcentagemhonorario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property diashonorarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiashonorario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property porcentagemdescontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnporcentagemdesconto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property diasdescontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiasdesconto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property observacoesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobservacoes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property proprietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproprietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tipoimovelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoimovel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property situacaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsituacao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContratoAluguelRow
            Get
                Return CType(Me.Rows(index),ContratoAluguelRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ContratoAluguelRowChanging As ContratoAluguelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ContratoAluguelRowChanged As ContratoAluguelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ContratoAluguelRowDeleting As ContratoAluguelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ContratoAluguelRowDeleted As ContratoAluguelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddContratoAluguelRow(ByVal row As ContratoAluguelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddContratoAluguelRow( _
                    ByVal id_proprietario As Integer,  _
                    ByVal id_imovel As Integer,  _
                    ByVal id_inquilino1 As Integer,  _
                    ByVal id_inquilino2 As Integer,  _
                    ByVal id_fiador1 As Integer,  _
                    ByVal id_fiador2 As Integer,  _
                    ByVal datacontrato As Date,  _
                    ByVal dataencerramentocontrato As Date,  _
                    ByVal vencimentoparcelas As Integer,  _
                    ByVal iniciocobranca As Date,  _
                    ByVal nometestemunha1 As String,  _
                    ByVal cpftestemunha1 As String,  _
                    ByVal nometestemunha2 As String,  _
                    ByVal cpftestemunha2 As String,  _
                    ByVal nomefiador1 As String,  _
                    ByVal nomefiador2 As String,  _
                    ByVal valoraluguel As Double,  _
                    ByVal porcentagemmultaatraso As Integer,  _
                    ByVal diasmultaatraso As Integer,  _
                    ByVal porcentagemjurosmora As Integer,  _
                    ByVal diasjurosmora As Integer,  _
                    ByVal porcentagemhonorario As Integer,  _
                    ByVal diashonorario As Integer,  _
                    ByVal porcentagemdesconto As Integer,  _
                    ByVal diasdesconto As Integer,  _
                    ByVal observacoes As String,  _
                    ByVal proprietario As String,  _
                    ByVal tipoimovel As String,  _
                    ByVal situacao As String) As ContratoAluguelRow
            Dim rowContratoAluguelRow As ContratoAluguelRow = CType(Me.NewRow,ContratoAluguelRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, id_proprietario, id_imovel, id_inquilino1, id_inquilino2, id_fiador1, id_fiador2, datacontrato, dataencerramentocontrato, vencimentoparcelas, iniciocobranca, nometestemunha1, cpftestemunha1, nometestemunha2, cpftestemunha2, nomefiador1, nomefiador2, valoraluguel, porcentagemmultaatraso, diasmultaatraso, porcentagemjurosmora, diasjurosmora, porcentagemhonorario, diashonorario, porcentagemdesconto, diasdesconto, observacoes, proprietario, tipoimovel, situacao}
            rowContratoAluguelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContratoAluguelRow)
            Return rowContratoAluguelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_contrato(ByVal id_contrato As Integer) As ContratoAluguelRow
            Return CType(Me.Rows.Find(New Object() {id_contrato}),ContratoAluguelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ContratoAluguelDataTable = CType(MyBase.Clone,ContratoAluguelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ContratoAluguelDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_contrato = MyBase.Columns("id_contrato")
            Me.columnid_proprietario = MyBase.Columns("id_proprietario")
            Me.columnid_imovel = MyBase.Columns("id_imovel")
            Me.columnid_inquilino1 = MyBase.Columns("id_inquilino1")
            Me.columnid_inquilino2 = MyBase.Columns("id_inquilino2")
            Me.columnid_fiador1 = MyBase.Columns("id_fiador1")
            Me.columnid_fiador2 = MyBase.Columns("id_fiador2")
            Me.columndatacontrato = MyBase.Columns("datacontrato")
            Me.columndataencerramentocontrato = MyBase.Columns("dataencerramentocontrato")
            Me.columnvencimentoparcelas = MyBase.Columns("vencimentoparcelas")
            Me.columniniciocobranca = MyBase.Columns("iniciocobranca")
            Me.columnnometestemunha1 = MyBase.Columns("nometestemunha1")
            Me.columncpftestemunha1 = MyBase.Columns("cpftestemunha1")
            Me.columnnometestemunha2 = MyBase.Columns("nometestemunha2")
            Me.columncpftestemunha2 = MyBase.Columns("cpftestemunha2")
            Me.columnnomefiador1 = MyBase.Columns("nomefiador1")
            Me.columnnomefiador2 = MyBase.Columns("nomefiador2")
            Me.columnvaloraluguel = MyBase.Columns("valoraluguel")
            Me.columnporcentagemmultaatraso = MyBase.Columns("porcentagemmultaatraso")
            Me.columndiasmultaatraso = MyBase.Columns("diasmultaatraso")
            Me.columnporcentagemjurosmora = MyBase.Columns("porcentagemjurosmora")
            Me.columndiasjurosmora = MyBase.Columns("diasjurosmora")
            Me.columnporcentagemhonorario = MyBase.Columns("porcentagemhonorario")
            Me.columndiashonorario = MyBase.Columns("diashonorario")
            Me.columnporcentagemdesconto = MyBase.Columns("porcentagemdesconto")
            Me.columndiasdesconto = MyBase.Columns("diasdesconto")
            Me.columnobservacoes = MyBase.Columns("observacoes")
            Me.columnproprietario = MyBase.Columns("proprietario")
            Me.columntipoimovel = MyBase.Columns("tipoimovel")
            Me.columnsituacao = MyBase.Columns("situacao")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_contrato = New Global.System.Data.DataColumn("id_contrato", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_contrato)
            Me.columnid_proprietario = New Global.System.Data.DataColumn("id_proprietario", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_proprietario)
            Me.columnid_imovel = New Global.System.Data.DataColumn("id_imovel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_imovel)
            Me.columnid_inquilino1 = New Global.System.Data.DataColumn("id_inquilino1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_inquilino1)
            Me.columnid_inquilino2 = New Global.System.Data.DataColumn("id_inquilino2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_inquilino2)
            Me.columnid_fiador1 = New Global.System.Data.DataColumn("id_fiador1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_fiador1)
            Me.columnid_fiador2 = New Global.System.Data.DataColumn("id_fiador2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_fiador2)
            Me.columndatacontrato = New Global.System.Data.DataColumn("datacontrato", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatacontrato)
            Me.columndataencerramentocontrato = New Global.System.Data.DataColumn("dataencerramentocontrato", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndataencerramentocontrato)
            Me.columnvencimentoparcelas = New Global.System.Data.DataColumn("vencimentoparcelas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvencimentoparcelas)
            Me.columniniciocobranca = New Global.System.Data.DataColumn("iniciocobranca", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniniciocobranca)
            Me.columnnometestemunha1 = New Global.System.Data.DataColumn("nometestemunha1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnometestemunha1)
            Me.columncpftestemunha1 = New Global.System.Data.DataColumn("cpftestemunha1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpftestemunha1)
            Me.columnnometestemunha2 = New Global.System.Data.DataColumn("nometestemunha2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnometestemunha2)
            Me.columncpftestemunha2 = New Global.System.Data.DataColumn("cpftestemunha2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpftestemunha2)
            Me.columnnomefiador1 = New Global.System.Data.DataColumn("nomefiador1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomefiador1)
            Me.columnnomefiador2 = New Global.System.Data.DataColumn("nomefiador2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomefiador2)
            Me.columnvaloraluguel = New Global.System.Data.DataColumn("valoraluguel", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvaloraluguel)
            Me.columnporcentagemmultaatraso = New Global.System.Data.DataColumn("porcentagemmultaatraso", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnporcentagemmultaatraso)
            Me.columndiasmultaatraso = New Global.System.Data.DataColumn("diasmultaatraso", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiasmultaatraso)
            Me.columnporcentagemjurosmora = New Global.System.Data.DataColumn("porcentagemjurosmora", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnporcentagemjurosmora)
            Me.columndiasjurosmora = New Global.System.Data.DataColumn("diasjurosmora", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiasjurosmora)
            Me.columnporcentagemhonorario = New Global.System.Data.DataColumn("porcentagemhonorario", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnporcentagemhonorario)
            Me.columndiashonorario = New Global.System.Data.DataColumn("diashonorario", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiashonorario)
            Me.columnporcentagemdesconto = New Global.System.Data.DataColumn("porcentagemdesconto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnporcentagemdesconto)
            Me.columndiasdesconto = New Global.System.Data.DataColumn("diasdesconto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiasdesconto)
            Me.columnobservacoes = New Global.System.Data.DataColumn("observacoes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobservacoes)
            Me.columnproprietario = New Global.System.Data.DataColumn("proprietario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproprietario)
            Me.columntipoimovel = New Global.System.Data.DataColumn("tipoimovel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoimovel)
            Me.columnsituacao = New Global.System.Data.DataColumn("situacao", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsituacao)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_contrato}, true))
            Me.columnid_contrato.AutoIncrement = true
            Me.columnid_contrato.AutoIncrementSeed = -1
            Me.columnid_contrato.AutoIncrementStep = -1
            Me.columnid_contrato.AllowDBNull = false
            Me.columnid_contrato.ReadOnly = true
            Me.columnid_contrato.Unique = true
            Me.columnid_proprietario.AllowDBNull = false
            Me.columnid_imovel.AllowDBNull = false
            Me.columnid_inquilino1.AllowDBNull = false
            Me.columnid_inquilino2.AllowDBNull = false
            Me.columnid_fiador1.AllowDBNull = false
            Me.columnid_fiador2.AllowDBNull = false
            Me.columndatacontrato.AllowDBNull = false
            Me.columndataencerramentocontrato.AllowDBNull = false
            Me.columnvencimentoparcelas.AllowDBNull = false
            Me.columniniciocobranca.AllowDBNull = false
            Me.columnnometestemunha1.AllowDBNull = false
            Me.columnnometestemunha1.MaxLength = 50
            Me.columncpftestemunha1.AllowDBNull = false
            Me.columncpftestemunha1.MaxLength = 50
            Me.columnnometestemunha2.AllowDBNull = false
            Me.columnnometestemunha2.MaxLength = 50
            Me.columncpftestemunha2.AllowDBNull = false
            Me.columncpftestemunha2.MaxLength = 50
            Me.columnnomefiador1.AllowDBNull = false
            Me.columnnomefiador1.MaxLength = 50
            Me.columnnomefiador2.AllowDBNull = false
            Me.columnnomefiador2.MaxLength = 50
            Me.columnvaloraluguel.AllowDBNull = false
            Me.columnporcentagemmultaatraso.AllowDBNull = false
            Me.columndiasmultaatraso.AllowDBNull = false
            Me.columnporcentagemjurosmora.AllowDBNull = false
            Me.columndiasjurosmora.AllowDBNull = false
            Me.columnporcentagemhonorario.AllowDBNull = false
            Me.columndiashonorario.AllowDBNull = false
            Me.columnporcentagemdesconto.AllowDBNull = false
            Me.columndiasdesconto.AllowDBNull = false
            Me.columnobservacoes.MaxLength = 100
            Me.columnproprietario.AllowDBNull = false
            Me.columnproprietario.MaxLength = 50
            Me.columntipoimovel.AllowDBNull = false
            Me.columntipoimovel.MaxLength = 50
            Me.columnsituacao.AllowDBNull = false
            Me.columnsituacao.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewContratoAluguelRow() As ContratoAluguelRow
            Return CType(Me.NewRow,ContratoAluguelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ContratoAluguelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ContratoAluguelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContratoAluguelRowChangedEvent) Is Nothing) Then
                RaiseEvent ContratoAluguelRowChanged(Me, New ContratoAluguelRowChangeEvent(CType(e.Row,ContratoAluguelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContratoAluguelRowChangingEvent) Is Nothing) Then
                RaiseEvent ContratoAluguelRowChanging(Me, New ContratoAluguelRowChangeEvent(CType(e.Row,ContratoAluguelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContratoAluguelRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContratoAluguelRowDeleted(Me, New ContratoAluguelRowChangeEvent(CType(e.Row,ContratoAluguelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContratoAluguelRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContratoAluguelRowDeleting(Me, New ContratoAluguelRowChangeEvent(CType(e.Row,ContratoAluguelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveContratoAluguelRow(ByVal row As ContratoAluguelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GabrielSIAEDB2015DataSet = New GabrielSIAEDB2015DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ContratoAluguelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ContratoAluguelRow
        Inherits Global.System.Data.DataRow
        
        Private tableContratoAluguel As ContratoAluguelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContratoAluguel = CType(Me.Table,ContratoAluguelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_contrato() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_contratoColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_contratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_proprietario() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_proprietarioColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_proprietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_imovel() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_imovelColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_imovelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_inquilino1() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_inquilino1Column),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_inquilino1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_inquilino2() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_inquilino2Column),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_inquilino2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_fiador1() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_fiador1Column),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_fiador1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_fiador2() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.id_fiador2Column),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.id_fiador2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property datacontrato() As Date
            Get
                Return CType(Me(Me.tableContratoAluguel.datacontratoColumn),Date)
            End Get
            Set
                Me(Me.tableContratoAluguel.datacontratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dataencerramentocontrato() As Date
            Get
                Return CType(Me(Me.tableContratoAluguel.dataencerramentocontratoColumn),Date)
            End Get
            Set
                Me(Me.tableContratoAluguel.dataencerramentocontratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vencimentoparcelas() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.vencimentoparcelasColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.vencimentoparcelasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property iniciocobranca() As Date
            Get
                Return CType(Me(Me.tableContratoAluguel.iniciocobrancaColumn),Date)
            End Get
            Set
                Me(Me.tableContratoAluguel.iniciocobrancaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nometestemunha1() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.nometestemunha1Column),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.nometestemunha1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cpftestemunha1() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.cpftestemunha1Column),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.cpftestemunha1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nometestemunha2() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.nometestemunha2Column),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.nometestemunha2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cpftestemunha2() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.cpftestemunha2Column),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.cpftestemunha2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nomefiador1() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.nomefiador1Column),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.nomefiador1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nomefiador2() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.nomefiador2Column),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.nomefiador2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valoraluguel() As Double
            Get
                Return CType(Me(Me.tableContratoAluguel.valoraluguelColumn),Double)
            End Get
            Set
                Me(Me.tableContratoAluguel.valoraluguelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property porcentagemmultaatraso() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.porcentagemmultaatrasoColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.porcentagemmultaatrasoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property diasmultaatraso() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.diasmultaatrasoColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.diasmultaatrasoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property porcentagemjurosmora() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.porcentagemjurosmoraColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.porcentagemjurosmoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property diasjurosmora() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.diasjurosmoraColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.diasjurosmoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property porcentagemhonorario() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.porcentagemhonorarioColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.porcentagemhonorarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property diashonorario() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.diashonorarioColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.diashonorarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property porcentagemdesconto() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.porcentagemdescontoColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.porcentagemdescontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property diasdesconto() As Integer
            Get
                Return CType(Me(Me.tableContratoAluguel.diasdescontoColumn),Integer)
            End Get
            Set
                Me(Me.tableContratoAluguel.diasdescontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property observacoes() As String
            Get
                Try 
                    Return CType(Me(Me.tableContratoAluguel.observacoesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'observacoes' in table 'ContratoAluguel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContratoAluguel.observacoesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property proprietario() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.proprietarioColumn),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.proprietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tipoimovel() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.tipoimovelColumn),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.tipoimovelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property situacao() As String
            Get
                Return CType(Me(Me.tableContratoAluguel.situacaoColumn),String)
            End Get
            Set
                Me(Me.tableContratoAluguel.situacaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsobservacoesNull() As Boolean
            Return Me.IsNull(Me.tableContratoAluguel.observacoesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetobservacoesNull()
            Me(Me.tableContratoAluguel.observacoesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ContratoAluguelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ContratoAluguelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ContratoAluguelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ContratoAluguelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace GabrielSIAEDB2015DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ContratoAluguelTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ContratoAluguel"
            tableMapping.ColumnMappings.Add("id_contrato", "id_contrato")
            tableMapping.ColumnMappings.Add("id_proprietario", "id_proprietario")
            tableMapping.ColumnMappings.Add("id_imovel", "id_imovel")
            tableMapping.ColumnMappings.Add("id_inquilino1", "id_inquilino1")
            tableMapping.ColumnMappings.Add("id_inquilino2", "id_inquilino2")
            tableMapping.ColumnMappings.Add("id_fiador1", "id_fiador1")
            tableMapping.ColumnMappings.Add("id_fiador2", "id_fiador2")
            tableMapping.ColumnMappings.Add("datacontrato", "datacontrato")
            tableMapping.ColumnMappings.Add("dataencerramentocontrato", "dataencerramentocontrato")
            tableMapping.ColumnMappings.Add("vencimentoparcelas", "vencimentoparcelas")
            tableMapping.ColumnMappings.Add("iniciocobranca", "iniciocobranca")
            tableMapping.ColumnMappings.Add("nometestemunha1", "nometestemunha1")
            tableMapping.ColumnMappings.Add("cpftestemunha1", "cpftestemunha1")
            tableMapping.ColumnMappings.Add("nometestemunha2", "nometestemunha2")
            tableMapping.ColumnMappings.Add("cpftestemunha2", "cpftestemunha2")
            tableMapping.ColumnMappings.Add("nomefiador1", "nomefiador1")
            tableMapping.ColumnMappings.Add("nomefiador2", "nomefiador2")
            tableMapping.ColumnMappings.Add("valoraluguel", "valoraluguel")
            tableMapping.ColumnMappings.Add("porcentagemmultaatraso", "porcentagemmultaatraso")
            tableMapping.ColumnMappings.Add("diasmultaatraso", "diasmultaatraso")
            tableMapping.ColumnMappings.Add("porcentagemjurosmora", "porcentagemjurosmora")
            tableMapping.ColumnMappings.Add("diasjurosmora", "diasjurosmora")
            tableMapping.ColumnMappings.Add("porcentagemhonorario", "porcentagemhonorario")
            tableMapping.ColumnMappings.Add("diashonorario", "diashonorario")
            tableMapping.ColumnMappings.Add("porcentagemdesconto", "porcentagemdesconto")
            tableMapping.ColumnMappings.Add("diasdesconto", "diasdesconto")
            tableMapping.ColumnMappings.Add("observacoes", "observacoes")
            tableMapping.ColumnMappings.Add("proprietario", "proprietario")
            tableMapping.ColumnMappings.Add("tipoimovel", "tipoimovel")
            tableMapping.ColumnMappings.Add("situacao", "situacao")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ContratoAluguel] WHERE (([id_contrato] = @Original_id_contrato"& _ 
                ") AND ([id_proprietario] = @Original_id_proprietario) AND ([id_imovel] = @Origin"& _ 
                "al_id_imovel) AND ([id_inquilino1] = @Original_id_inquilino1) AND ([id_inquilino"& _ 
                "2] = @Original_id_inquilino2) AND ([id_fiador1] = @Original_id_fiador1) AND ([id"& _ 
                "_fiador2] = @Original_id_fiador2) AND ([datacontrato] = @Original_datacontrato) "& _ 
                "AND ([dataencerramentocontrato] = @Original_dataencerramentocontrato) AND ([venc"& _ 
                "imentoparcelas] = @Original_vencimentoparcelas) AND ([iniciocobranca] = @Origina"& _ 
                "l_iniciocobranca) AND ([nometestemunha1] = @Original_nometestemunha1) AND ([cpft"& _ 
                "estemunha1] = @Original_cpftestemunha1) AND ([nometestemunha2] = @Original_nomet"& _ 
                "estemunha2) AND ([cpftestemunha2] = @Original_cpftestemunha2) AND ([nomefiador1]"& _ 
                " = @Original_nomefiador1) AND ([nomefiador2] = @Original_nomefiador2) AND ([valo"& _ 
                "raluguel] = @Original_valoraluguel) AND ([porcentagemmultaatraso] = @Original_po"& _ 
                "rcentagemmultaatraso) AND ([diasmultaatraso] = @Original_diasmultaatraso) AND (["& _ 
                "porcentagemjurosmora] = @Original_porcentagemjurosmora) AND ([diasjurosmora] = @"& _ 
                "Original_diasjurosmora) AND ([porcentagemhonorario] = @Original_porcentagemhonor"& _ 
                "ario) AND ([diashonorario] = @Original_diashonorario) AND ([porcentagemdesconto]"& _ 
                " = @Original_porcentagemdesconto) AND ([diasdesconto] = @Original_diasdesconto) "& _ 
                "AND ((@IsNull_observacoes = 1 AND [observacoes] IS NULL) OR ([observacoes] = @Or"& _ 
                "iginal_observacoes)) AND ([proprietario] = @Original_proprietario) AND ([tipoimo"& _ 
                "vel] = @Original_tipoimovel) AND ([situacao] = @Original_situacao))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_contrato", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_contrato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_proprietario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_proprietario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_imovel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_imovel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_inquilino1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_inquilino2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_fiador1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_fiador2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datacontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datacontrato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dataencerramentocontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dataencerramentocontrato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vencimentoparcelas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vencimentoparcelas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iniciocobranca", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iniciocobranca", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nometestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cpftestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nometestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cpftestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nomefiador1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nomefiador2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_valoraluguel", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valoraluguel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemmultaatraso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diasmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasmultaatraso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemjurosmora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diasjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasjurosmora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemhonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemhonorario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diashonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diashonorario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemdesconto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diasdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasdesconto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_observacoes", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "observacoes", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_observacoes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "observacoes", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_proprietario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "proprietario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tipoimovel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoimovel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_situacao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "situacao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ContratoAluguel] ([id_proprietario], [id_imovel], [id_inquilin"& _ 
                "o1], [id_inquilino2], [id_fiador1], [id_fiador2], [datacontrato], [dataencerrame"& _ 
                "ntocontrato], [vencimentoparcelas], [iniciocobranca], [nometestemunha1], [cpftes"& _ 
                "temunha1], [nometestemunha2], [cpftestemunha2], [nomefiador1], [nomefiador2], [v"& _ 
                "aloraluguel], [porcentagemmultaatraso], [diasmultaatraso], [porcentagemjurosmora"& _ 
                "], [diasjurosmora], [porcentagemhonorario], [diashonorario], [porcentagemdescont"& _ 
                "o], [diasdesconto], [observacoes], [proprietario], [tipoimovel], [situacao]) VAL"& _ 
                "UES (@id_proprietario, @id_imovel, @id_inquilino1, @id_inquilino2, @id_fiador1, "& _ 
                "@id_fiador2, @datacontrato, @dataencerramentocontrato, @vencimentoparcelas, @ini"& _ 
                "ciocobranca, @nometestemunha1, @cpftestemunha1, @nometestemunha2, @cpftestemunha"& _ 
                "2, @nomefiador1, @nomefiador2, @valoraluguel, @porcentagemmultaatraso, @diasmult"& _ 
                "aatraso, @porcentagemjurosmora, @diasjurosmora, @porcentagemhonorario, @diashono"& _ 
                "rario, @porcentagemdesconto, @diasdesconto, @observacoes, @proprietario, @tipoim"& _ 
                "ovel, @situacao);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_contrato, id_proprietario, id_imovel, id_inquilino1"& _ 
                ", id_inquilino2, id_fiador1, id_fiador2, datacontrato, dataencerramentocontrato,"& _ 
                " vencimentoparcelas, iniciocobranca, nometestemunha1, cpftestemunha1, nometestem"& _ 
                "unha2, cpftestemunha2, nomefiador1, nomefiador2, valoraluguel, porcentagemmultaa"& _ 
                "traso, diasmultaatraso, porcentagemjurosmora, diasjurosmora, porcentagemhonorari"& _ 
                "o, diashonorario, porcentagemdesconto, diasdesconto, observacoes, proprietario, "& _ 
                "tipoimovel, situacao FROM ContratoAluguel WHERE (id_contrato = SCOPE_IDENTITY())"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_proprietario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_proprietario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_imovel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_imovel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_inquilino1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_inquilino2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_fiador1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_fiador2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datacontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datacontrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dataencerramentocontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dataencerramentocontrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vencimentoparcelas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vencimentoparcelas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iniciocobranca", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iniciocobranca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nometestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpftestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nometestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpftestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomefiador1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomefiador2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valoraluguel", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valoraluguel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemmultaatraso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diasmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasmultaatraso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemjurosmora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diasjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasjurosmora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemhonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemhonorario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diashonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diashonorario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemdesconto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diasdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasdesconto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@observacoes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "observacoes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proprietario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "proprietario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipoimovel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoimovel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@situacao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "situacao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ContratoAluguel] SET [id_proprietario] = @id_proprietario, [id_imov"& _ 
                "el] = @id_imovel, [id_inquilino1] = @id_inquilino1, [id_inquilino2] = @id_inquil"& _ 
                "ino2, [id_fiador1] = @id_fiador1, [id_fiador2] = @id_fiador2, [datacontrato] = @"& _ 
                "datacontrato, [dataencerramentocontrato] = @dataencerramentocontrato, [venciment"& _ 
                "oparcelas] = @vencimentoparcelas, [iniciocobranca] = @iniciocobranca, [nometeste"& _ 
                "munha1] = @nometestemunha1, [cpftestemunha1] = @cpftestemunha1, [nometestemunha2"& _ 
                "] = @nometestemunha2, [cpftestemunha2] = @cpftestemunha2, [nomefiador1] = @nomef"& _ 
                "iador1, [nomefiador2] = @nomefiador2, [valoraluguel] = @valoraluguel, [porcentag"& _ 
                "emmultaatraso] = @porcentagemmultaatraso, [diasmultaatraso] = @diasmultaatraso, "& _ 
                "[porcentagemjurosmora] = @porcentagemjurosmora, [diasjurosmora] = @diasjurosmora"& _ 
                ", [porcentagemhonorario] = @porcentagemhonorario, [diashonorario] = @diashonorar"& _ 
                "io, [porcentagemdesconto] = @porcentagemdesconto, [diasdesconto] = @diasdesconto"& _ 
                ", [observacoes] = @observacoes, [proprietario] = @proprietario, [tipoimovel] = @"& _ 
                "tipoimovel, [situacao] = @situacao WHERE (([id_contrato] = @Original_id_contrato"& _ 
                ") AND ([id_proprietario] = @Original_id_proprietario) AND ([id_imovel] = @Origin"& _ 
                "al_id_imovel) AND ([id_inquilino1] = @Original_id_inquilino1) AND ([id_inquilino"& _ 
                "2] = @Original_id_inquilino2) AND ([id_fiador1] = @Original_id_fiador1) AND ([id"& _ 
                "_fiador2] = @Original_id_fiador2) AND ([datacontrato] = @Original_datacontrato) "& _ 
                "AND ([dataencerramentocontrato] = @Original_dataencerramentocontrato) AND ([venc"& _ 
                "imentoparcelas] = @Original_vencimentoparcelas) AND ([iniciocobranca] = @Origina"& _ 
                "l_iniciocobranca) AND ([nometestemunha1] = @Original_nometestemunha1) AND ([cpft"& _ 
                "estemunha1] = @Original_cpftestemunha1) AND ([nometestemunha2] = @Original_nomet"& _ 
                "estemunha2) AND ([cpftestemunha2] = @Original_cpftestemunha2) AND ([nomefiador1]"& _ 
                " = @Original_nomefiador1) AND ([nomefiador2] = @Original_nomefiador2) AND ([valo"& _ 
                "raluguel] = @Original_valoraluguel) AND ([porcentagemmultaatraso] = @Original_po"& _ 
                "rcentagemmultaatraso) AND ([diasmultaatraso] = @Original_diasmultaatraso) AND (["& _ 
                "porcentagemjurosmora] = @Original_porcentagemjurosmora) AND ([diasjurosmora] = @"& _ 
                "Original_diasjurosmora) AND ([porcentagemhonorario] = @Original_porcentagemhonor"& _ 
                "ario) AND ([diashonorario] = @Original_diashonorario) AND ([porcentagemdesconto]"& _ 
                " = @Original_porcentagemdesconto) AND ([diasdesconto] = @Original_diasdesconto) "& _ 
                "AND ((@IsNull_observacoes = 1 AND [observacoes] IS NULL) OR ([observacoes] = @Or"& _ 
                "iginal_observacoes)) AND ([proprietario] = @Original_proprietario) AND ([tipoimo"& _ 
                "vel] = @Original_tipoimovel) AND ([situacao] = @Original_situacao));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_"& _ 
                "contrato, id_proprietario, id_imovel, id_inquilino1, id_inquilino2, id_fiador1, "& _ 
                "id_fiador2, datacontrato, dataencerramentocontrato, vencimentoparcelas, inicioco"& _ 
                "branca, nometestemunha1, cpftestemunha1, nometestemunha2, cpftestemunha2, nomefi"& _ 
                "ador1, nomefiador2, valoraluguel, porcentagemmultaatraso, diasmultaatraso, porce"& _ 
                "ntagemjurosmora, diasjurosmora, porcentagemhonorario, diashonorario, porcentagem"& _ 
                "desconto, diasdesconto, observacoes, proprietario, tipoimovel, situacao FROM Con"& _ 
                "tratoAluguel WHERE (id_contrato = @id_contrato)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_proprietario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_proprietario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_imovel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_imovel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_inquilino1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_inquilino2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_fiador1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_fiador2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datacontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datacontrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dataencerramentocontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dataencerramentocontrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vencimentoparcelas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vencimentoparcelas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iniciocobranca", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iniciocobranca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nometestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpftestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nometestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpftestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomefiador1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomefiador2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valoraluguel", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valoraluguel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemmultaatraso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diasmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasmultaatraso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemjurosmora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diasjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasjurosmora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemhonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemhonorario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diashonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diashonorario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@porcentagemdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemdesconto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diasdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasdesconto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@observacoes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "observacoes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proprietario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "proprietario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipoimovel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoimovel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@situacao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "situacao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_contrato", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_contrato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_proprietario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_proprietario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_imovel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_imovel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_inquilino1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_inquilino2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_inquilino2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_fiador1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_fiador2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_fiador2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datacontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datacontrato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dataencerramentocontrato", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dataencerramentocontrato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vencimentoparcelas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vencimentoparcelas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iniciocobranca", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iniciocobranca", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nometestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cpftestemunha1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nometestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nometestemunha2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cpftestemunha2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cpftestemunha2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nomefiador1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nomefiador2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomefiador2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_valoraluguel", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valoraluguel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemmultaatraso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diasmultaatraso", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasmultaatraso", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemjurosmora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diasjurosmora", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasjurosmora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemhonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemhonorario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diashonorario", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diashonorario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_porcentagemdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "porcentagemdesconto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_diasdesconto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "diasdesconto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_observacoes", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "observacoes", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_observacoes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "observacoes", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_proprietario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "proprietario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tipoimovel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoimovel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_situacao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "situacao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_contrato", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "id_contrato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ImovelSIAEDB2015.View.My.MySettings.Default.GabrielSIAEDB2015ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_contrato, id_proprietario, id_imovel, id_inquilino1, id_inquilino2, id_"& _ 
                "fiador1, id_fiador2, datacontrato, dataencerramentocontrato, vencimentoparcelas,"& _ 
                " iniciocobranca, nometestemunha1, cpftestemunha1, nometestemunha2, cpftestemunha"& _ 
                "2, nomefiador1, nomefiador2, valoraluguel, porcentagemmultaatraso, diasmultaatra"& _ 
                "so, porcentagemjurosmora, diasjurosmora, porcentagemhonorario, diashonorario, po"& _ 
                "rcentagemdesconto, diasdesconto, observacoes, proprietario, tipoimovel, situacao"& _ 
                " FROM dbo.ContratoAluguel"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GabrielSIAEDB2015DataSet.ContratoAluguelDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GabrielSIAEDB2015DataSet.ContratoAluguelDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GabrielSIAEDB2015DataSet.ContratoAluguelDataTable = New GabrielSIAEDB2015DataSet.ContratoAluguelDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GabrielSIAEDB2015DataSet.ContratoAluguelDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GabrielSIAEDB2015DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ContratoAluguel")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id_contrato As Integer,  _
                    ByVal Original_id_proprietario As Integer,  _
                    ByVal Original_id_imovel As Integer,  _
                    ByVal Original_id_inquilino1 As Integer,  _
                    ByVal Original_id_inquilino2 As Integer,  _
                    ByVal Original_id_fiador1 As Integer,  _
                    ByVal Original_id_fiador2 As Integer,  _
                    ByVal Original_datacontrato As Date,  _
                    ByVal Original_dataencerramentocontrato As Date,  _
                    ByVal Original_vencimentoparcelas As Integer,  _
                    ByVal Original_iniciocobranca As Date,  _
                    ByVal Original_nometestemunha1 As String,  _
                    ByVal Original_cpftestemunha1 As String,  _
                    ByVal Original_nometestemunha2 As String,  _
                    ByVal Original_cpftestemunha2 As String,  _
                    ByVal Original_nomefiador1 As String,  _
                    ByVal Original_nomefiador2 As String,  _
                    ByVal Original_valoraluguel As Double,  _
                    ByVal Original_porcentagemmultaatraso As Integer,  _
                    ByVal Original_diasmultaatraso As Integer,  _
                    ByVal Original_porcentagemjurosmora As Integer,  _
                    ByVal Original_diasjurosmora As Integer,  _
                    ByVal Original_porcentagemhonorario As Integer,  _
                    ByVal Original_diashonorario As Integer,  _
                    ByVal Original_porcentagemdesconto As Integer,  _
                    ByVal Original_diasdesconto As Integer,  _
                    ByVal Original_observacoes As String,  _
                    ByVal Original_proprietario As String,  _
                    ByVal Original_tipoimovel As String,  _
                    ByVal Original_situacao As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_contrato,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_id_proprietario,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_imovel,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_id_inquilino1,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_id_inquilino2,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_id_fiador1,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_id_fiador2,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_datacontrato,Date)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_dataencerramentocontrato,Date)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_vencimentoparcelas,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_iniciocobranca,Date)
            If (Original_nometestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nometestemunha1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_nometestemunha1,String)
            End If
            If (Original_cpftestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cpftestemunha1")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_cpftestemunha1,String)
            End If
            If (Original_nometestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nometestemunha2")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_nometestemunha2,String)
            End If
            If (Original_cpftestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cpftestemunha2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_cpftestemunha2,String)
            End If
            If (Original_nomefiador1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nomefiador1")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_nomefiador1,String)
            End If
            If (Original_nomefiador2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nomefiador2")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_nomefiador2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_valoraluguel,Double)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_porcentagemmultaatraso,Integer)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_diasmultaatraso,Integer)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_porcentagemjurosmora,Integer)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_diasjurosmora,Integer)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_porcentagemhonorario,Integer)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_diashonorario,Integer)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_porcentagemdesconto,Integer)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_diasdesconto,Integer)
            If (Original_observacoes Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_observacoes,String)
            End If
            If (Original_proprietario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_proprietario")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_proprietario,String)
            End If
            If (Original_tipoimovel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tipoimovel")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_tipoimovel,String)
            End If
            If (Original_situacao Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_situacao")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_situacao,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id_proprietario As Integer,  _
                    ByVal id_imovel As Integer,  _
                    ByVal id_inquilino1 As Integer,  _
                    ByVal id_inquilino2 As Integer,  _
                    ByVal id_fiador1 As Integer,  _
                    ByVal id_fiador2 As Integer,  _
                    ByVal datacontrato As Date,  _
                    ByVal dataencerramentocontrato As Date,  _
                    ByVal vencimentoparcelas As Integer,  _
                    ByVal iniciocobranca As Date,  _
                    ByVal nometestemunha1 As String,  _
                    ByVal cpftestemunha1 As String,  _
                    ByVal nometestemunha2 As String,  _
                    ByVal cpftestemunha2 As String,  _
                    ByVal nomefiador1 As String,  _
                    ByVal nomefiador2 As String,  _
                    ByVal valoraluguel As Double,  _
                    ByVal porcentagemmultaatraso As Integer,  _
                    ByVal diasmultaatraso As Integer,  _
                    ByVal porcentagemjurosmora As Integer,  _
                    ByVal diasjurosmora As Integer,  _
                    ByVal porcentagemhonorario As Integer,  _
                    ByVal diashonorario As Integer,  _
                    ByVal porcentagemdesconto As Integer,  _
                    ByVal diasdesconto As Integer,  _
                    ByVal observacoes As String,  _
                    ByVal proprietario As String,  _
                    ByVal tipoimovel As String,  _
                    ByVal situacao As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_proprietario,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_imovel,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_inquilino1,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(id_inquilino2,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(id_fiador1,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(id_fiador2,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(datacontrato,Date)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(dataencerramentocontrato,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(vencimentoparcelas,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(iniciocobranca,Date)
            If (nometestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nometestemunha1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(nometestemunha1,String)
            End If
            If (cpftestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cpftestemunha1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(cpftestemunha1,String)
            End If
            If (nometestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nometestemunha2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(nometestemunha2,String)
            End If
            If (cpftestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cpftestemunha2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(cpftestemunha2,String)
            End If
            If (nomefiador1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomefiador1")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(nomefiador1,String)
            End If
            If (nomefiador2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomefiador2")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(nomefiador2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(valoraluguel,Double)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(porcentagemmultaatraso,Integer)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(diasmultaatraso,Integer)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(porcentagemjurosmora,Integer)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(diasjurosmora,Integer)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(porcentagemhonorario,Integer)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(diashonorario,Integer)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(porcentagemdesconto,Integer)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(diasdesconto,Integer)
            If (observacoes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(observacoes,String)
            End If
            If (proprietario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("proprietario")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(proprietario,String)
            End If
            If (tipoimovel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tipoimovel")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(tipoimovel,String)
            End If
            If (situacao Is Nothing) Then
                Throw New Global.System.ArgumentNullException("situacao")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(situacao,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_proprietario As Integer,  _
                    ByVal id_imovel As Integer,  _
                    ByVal id_inquilino1 As Integer,  _
                    ByVal id_inquilino2 As Integer,  _
                    ByVal id_fiador1 As Integer,  _
                    ByVal id_fiador2 As Integer,  _
                    ByVal datacontrato As Date,  _
                    ByVal dataencerramentocontrato As Date,  _
                    ByVal vencimentoparcelas As Integer,  _
                    ByVal iniciocobranca As Date,  _
                    ByVal nometestemunha1 As String,  _
                    ByVal cpftestemunha1 As String,  _
                    ByVal nometestemunha2 As String,  _
                    ByVal cpftestemunha2 As String,  _
                    ByVal nomefiador1 As String,  _
                    ByVal nomefiador2 As String,  _
                    ByVal valoraluguel As Double,  _
                    ByVal porcentagemmultaatraso As Integer,  _
                    ByVal diasmultaatraso As Integer,  _
                    ByVal porcentagemjurosmora As Integer,  _
                    ByVal diasjurosmora As Integer,  _
                    ByVal porcentagemhonorario As Integer,  _
                    ByVal diashonorario As Integer,  _
                    ByVal porcentagemdesconto As Integer,  _
                    ByVal diasdesconto As Integer,  _
                    ByVal observacoes As String,  _
                    ByVal proprietario As String,  _
                    ByVal tipoimovel As String,  _
                    ByVal situacao As String,  _
                    ByVal Original_id_contrato As Integer,  _
                    ByVal Original_id_proprietario As Integer,  _
                    ByVal Original_id_imovel As Integer,  _
                    ByVal Original_id_inquilino1 As Integer,  _
                    ByVal Original_id_inquilino2 As Integer,  _
                    ByVal Original_id_fiador1 As Integer,  _
                    ByVal Original_id_fiador2 As Integer,  _
                    ByVal Original_datacontrato As Date,  _
                    ByVal Original_dataencerramentocontrato As Date,  _
                    ByVal Original_vencimentoparcelas As Integer,  _
                    ByVal Original_iniciocobranca As Date,  _
                    ByVal Original_nometestemunha1 As String,  _
                    ByVal Original_cpftestemunha1 As String,  _
                    ByVal Original_nometestemunha2 As String,  _
                    ByVal Original_cpftestemunha2 As String,  _
                    ByVal Original_nomefiador1 As String,  _
                    ByVal Original_nomefiador2 As String,  _
                    ByVal Original_valoraluguel As Double,  _
                    ByVal Original_porcentagemmultaatraso As Integer,  _
                    ByVal Original_diasmultaatraso As Integer,  _
                    ByVal Original_porcentagemjurosmora As Integer,  _
                    ByVal Original_diasjurosmora As Integer,  _
                    ByVal Original_porcentagemhonorario As Integer,  _
                    ByVal Original_diashonorario As Integer,  _
                    ByVal Original_porcentagemdesconto As Integer,  _
                    ByVal Original_diasdesconto As Integer,  _
                    ByVal Original_observacoes As String,  _
                    ByVal Original_proprietario As String,  _
                    ByVal Original_tipoimovel As String,  _
                    ByVal Original_situacao As String,  _
                    ByVal id_contrato As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_proprietario,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_imovel,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(id_inquilino1,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(id_inquilino2,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(id_fiador1,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(id_fiador2,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(datacontrato,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(dataencerramentocontrato,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(vencimentoparcelas,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(iniciocobranca,Date)
            If (nometestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nometestemunha1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(nometestemunha1,String)
            End If
            If (cpftestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cpftestemunha1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(cpftestemunha1,String)
            End If
            If (nometestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nometestemunha2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(nometestemunha2,String)
            End If
            If (cpftestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cpftestemunha2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(cpftestemunha2,String)
            End If
            If (nomefiador1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomefiador1")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(nomefiador1,String)
            End If
            If (nomefiador2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomefiador2")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(nomefiador2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(valoraluguel,Double)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(porcentagemmultaatraso,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(diasmultaatraso,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(porcentagemjurosmora,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(diasjurosmora,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(porcentagemhonorario,Integer)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(diashonorario,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(porcentagemdesconto,Integer)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(diasdesconto,Integer)
            If (observacoes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(observacoes,String)
            End If
            If (proprietario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("proprietario")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(proprietario,String)
            End If
            If (tipoimovel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tipoimovel")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(tipoimovel,String)
            End If
            If (situacao Is Nothing) Then
                Throw New Global.System.ArgumentNullException("situacao")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(situacao,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_id_contrato,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_id_proprietario,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_id_imovel,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_id_inquilino1,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_id_inquilino2,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_id_fiador1,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_id_fiador2,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_datacontrato,Date)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_dataencerramentocontrato,Date)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_vencimentoparcelas,Integer)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_iniciocobranca,Date)
            If (Original_nometestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nometestemunha1")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_nometestemunha1,String)
            End If
            If (Original_cpftestemunha1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cpftestemunha1")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_cpftestemunha1,String)
            End If
            If (Original_nometestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nometestemunha2")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_nometestemunha2,String)
            End If
            If (Original_cpftestemunha2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cpftestemunha2")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_cpftestemunha2,String)
            End If
            If (Original_nomefiador1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nomefiador1")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_nomefiador1,String)
            End If
            If (Original_nomefiador2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nomefiador2")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_nomefiador2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_valoraluguel,Double)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_porcentagemmultaatraso,Integer)
            Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_diasmultaatraso,Integer)
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_porcentagemjurosmora,Integer)
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_diasjurosmora,Integer)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_porcentagemhonorario,Integer)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_diashonorario,Integer)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_porcentagemdesconto,Integer)
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_diasdesconto,Integer)
            If (Original_observacoes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_observacoes,String)
            End If
            If (Original_proprietario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_proprietario")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_proprietario,String)
            End If
            If (Original_tipoimovel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tipoimovel")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_tipoimovel,String)
            End If
            If (Original_situacao Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_situacao")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_situacao,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(id_contrato,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_proprietario As Integer,  _
                    ByVal id_imovel As Integer,  _
                    ByVal id_inquilino1 As Integer,  _
                    ByVal id_inquilino2 As Integer,  _
                    ByVal id_fiador1 As Integer,  _
                    ByVal id_fiador2 As Integer,  _
                    ByVal datacontrato As Date,  _
                    ByVal dataencerramentocontrato As Date,  _
                    ByVal vencimentoparcelas As Integer,  _
                    ByVal iniciocobranca As Date,  _
                    ByVal nometestemunha1 As String,  _
                    ByVal cpftestemunha1 As String,  _
                    ByVal nometestemunha2 As String,  _
                    ByVal cpftestemunha2 As String,  _
                    ByVal nomefiador1 As String,  _
                    ByVal nomefiador2 As String,  _
                    ByVal valoraluguel As Double,  _
                    ByVal porcentagemmultaatraso As Integer,  _
                    ByVal diasmultaatraso As Integer,  _
                    ByVal porcentagemjurosmora As Integer,  _
                    ByVal diasjurosmora As Integer,  _
                    ByVal porcentagemhonorario As Integer,  _
                    ByVal diashonorario As Integer,  _
                    ByVal porcentagemdesconto As Integer,  _
                    ByVal diasdesconto As Integer,  _
                    ByVal observacoes As String,  _
                    ByVal proprietario As String,  _
                    ByVal tipoimovel As String,  _
                    ByVal situacao As String,  _
                    ByVal Original_id_contrato As Integer,  _
                    ByVal Original_id_proprietario As Integer,  _
                    ByVal Original_id_imovel As Integer,  _
                    ByVal Original_id_inquilino1 As Integer,  _
                    ByVal Original_id_inquilino2 As Integer,  _
                    ByVal Original_id_fiador1 As Integer,  _
                    ByVal Original_id_fiador2 As Integer,  _
                    ByVal Original_datacontrato As Date,  _
                    ByVal Original_dataencerramentocontrato As Date,  _
                    ByVal Original_vencimentoparcelas As Integer,  _
                    ByVal Original_iniciocobranca As Date,  _
                    ByVal Original_nometestemunha1 As String,  _
                    ByVal Original_cpftestemunha1 As String,  _
                    ByVal Original_nometestemunha2 As String,  _
                    ByVal Original_cpftestemunha2 As String,  _
                    ByVal Original_nomefiador1 As String,  _
                    ByVal Original_nomefiador2 As String,  _
                    ByVal Original_valoraluguel As Double,  _
                    ByVal Original_porcentagemmultaatraso As Integer,  _
                    ByVal Original_diasmultaatraso As Integer,  _
                    ByVal Original_porcentagemjurosmora As Integer,  _
                    ByVal Original_diasjurosmora As Integer,  _
                    ByVal Original_porcentagemhonorario As Integer,  _
                    ByVal Original_diashonorario As Integer,  _
                    ByVal Original_porcentagemdesconto As Integer,  _
                    ByVal Original_diasdesconto As Integer,  _
                    ByVal Original_observacoes As String,  _
                    ByVal Original_proprietario As String,  _
                    ByVal Original_tipoimovel As String,  _
                    ByVal Original_situacao As String) As Integer
            Return Me.Update(id_proprietario, id_imovel, id_inquilino1, id_inquilino2, id_fiador1, id_fiador2, datacontrato, dataencerramentocontrato, vencimentoparcelas, iniciocobranca, nometestemunha1, cpftestemunha1, nometestemunha2, cpftestemunha2, nomefiador1, nomefiador2, valoraluguel, porcentagemmultaatraso, diasmultaatraso, porcentagemjurosmora, diasjurosmora, porcentagemhonorario, diashonorario, porcentagemdesconto, diasdesconto, observacoes, proprietario, tipoimovel, situacao, Original_id_contrato, Original_id_proprietario, Original_id_imovel, Original_id_inquilino1, Original_id_inquilino2, Original_id_fiador1, Original_id_fiador2, Original_datacontrato, Original_dataencerramentocontrato, Original_vencimentoparcelas, Original_iniciocobranca, Original_nometestemunha1, Original_cpftestemunha1, Original_nometestemunha2, Original_cpftestemunha2, Original_nomefiador1, Original_nomefiador2, Original_valoraluguel, Original_porcentagemmultaatraso, Original_diasmultaatraso, Original_porcentagemjurosmora, Original_diasjurosmora, Original_porcentagemhonorario, Original_diashonorario, Original_porcentagemdesconto, Original_diasdesconto, Original_observacoes, Original_proprietario, Original_tipoimovel, Original_situacao, Original_id_contrato)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _contratoAluguelTableAdapter As ContratoAluguelTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ContratoAluguelTableAdapter() As ContratoAluguelTableAdapter
            Get
                Return Me._contratoAluguelTableAdapter
            End Get
            Set
                Me._contratoAluguelTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._contratoAluguelTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contratoAluguelTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contratoAluguelTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._contratoAluguelTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As GabrielSIAEDB2015DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._contratoAluguelTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ContratoAluguel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contratoAluguelTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As GabrielSIAEDB2015DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._contratoAluguelTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ContratoAluguel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contratoAluguelTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As GabrielSIAEDB2015DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._contratoAluguelTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ContratoAluguel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contratoAluguelTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As GabrielSIAEDB2015DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._contratoAluguelTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contratoAluguelTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._contratoAluguelTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contratoAluguelTableAdapter, Me._contratoAluguelTableAdapter.Connection)
                    Me._contratoAluguelTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contratoAluguelTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contratoAluguelTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contratoAluguelTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contratoAluguelTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._contratoAluguelTableAdapter) Is Nothing) Then
                    Me._contratoAluguelTableAdapter.Connection = CType(revertConnections(Me._contratoAluguelTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contratoAluguelTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
